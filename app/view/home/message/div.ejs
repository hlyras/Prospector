<script>
  function messageDiv(message) {
    if (message.type == "reaction") {
      messageReaction(message);
      return null;
    }

    let message_div = lib.element.create("div", {
      class: "mobile-box b4-5 container margin-top-5",
      style: "position: relative;"
    });

    if (message.from_me == 1) {
      message_div.style.marginLeft = "auto";
    }

    let message_content = lib.element.create("div", {
      id: `message-${message.wa_id}-content`,
      class: "mobile-box container",
      style: "position: relative;"
    });
    message_div.append(message_content);

    let message_content_data = lib.element.create("div", {
      class: "box a1 ground",
      style: "position: relative;"
    });
    message_content.append(message_content_data);

    let message_reply = lib.element.create("img", {
      class: "size-15 icon",
      src: "/images/icon/reply.png",
      style: "position: absolute;right:5px;top:5px;"
    });
    message_content.append(message_reply);

    let message_react = lib.element.create("img", {
      id: `message-${message.wa_id}-react`,
      src: "/images/icon/react.png",
      class: "badge size-15 padding-3 radius-50 border shadow pointer icon",
      style: "position: absolute;background-color: #fff;"
    });
    message_content_data.append(message_react);

    if (message.from_me == 1) {
      message_content.style.marginLeft = "auto";
      lib.addCss(message_content_data, ["speech-triangle-right"]);
      message_react.style.left = `-25px`;
      message_react.style.top = '50%';
      message_react.style.transform = 'translateY(-50%)';
    }
    else {
      lib.addCss(message_content_data, ["speech-triangle-left"]);
      message_react.style.right = `-25px`;
      message_react.style.top = '50%';
      message_react.style.transform = 'translateY(-50%)';
    }

    if (message.type == "text" || message.type == "conversation") {
      let text_content = lib.element.create("div", {
        class: "mobile-box pre-wrap ground radius-5 lucida-grande rem08 padding-top-2 padding-right-10 padding-left-10 padding-bottom-2",
        style: `
        overflow-wrap: break-word;
        `
      }, message.content);
      message_content_data.append(text_content);
    }

    if (message.type == "image") {
      let image_content = lib.element.create("img", {
        class: "image-prop image-fit max-height-250",
        src: message.content
      });
      message_content_data.append(image_content);

      image_content.addEventListener("click", () => {
        lib.image.zoom(message.content);
      });
    }

    if (message.type == "audio") {
      let audio_content = lib.element.create("audio", {
        controls: true,
        src: message.content,
        class: "width-250"
      });
      message_content_data.append(audio_content);
    }

    if (message.type == "video") {
      let video_content = lib.element.create("video", {
        class: "height-250",
        controls: true,
        src: message.content
      });
      message_content_data.append(video_content);
    }

    let message_datetime = lib.element.create("div", {
      class: "mobile-box b1 rem06 padding-bottom-2 padding-left-5 padding-right-5 right"
    }, lib.timestampToFulldate(message.datetime));
    message_content_data.append(message_datetime);

    let message_reaction_box = lib.element.create("div", {
      id: `message-${message.wa_id}-reaction-box`,
      class: "mobile-box b1 container padding-3",
    });
    message_content.append(message_reaction_box);

    message_react.addEventListener('click', function (event) {
      event.stopPropagation();

      let react_box = reactBox(event);

      let emotes = ['👍', '❤️', '😂', '😯', '😢', '🙏'];
      for (let i in emotes) {
        let react_div = lib.element.create("div", {
          class: "mobile-box b6 radius-50 box-hover padding-5 center pointer noselect"
        }, emotes[i]);
        react_box.append(react_div);

        react_div.addEventListener("click", async () => {
          let response = await API.response(Message.react, {
            jid: message.jid,
            key: {
              remoteJid: message.jid,
              id: message.wa_id,
              fromMe: message.from_me,
              participant: message.participant ?
                message.participant : null
            },
            content: emotes[i]
          }, "none");

          react_box.remove();
        });
      };

      document.body.appendChild(react_box);
    });

    message_reply.addEventListener("click", () => {
      event.stopPropagation();

      openReply(message);
    });

    return message_div;
  };

  function reactBox(e, message) {
    document.querySelectorAll('.react-popup').forEach(el => el.remove());

    const rect = e.target.getBoundingClientRect();
    const screenHalfY = window.innerHeight / 2;
    const screenHalfX = window.innerWidth / 2;
    const opensUp = rect.top > screenHalfY;
    const isRight = rect.left > screenHalfX;

    const react_box = lib.element.create("div", {
      class: "react-popup container ground border radius-50 shadow scroll-x-hide scroll-y-hide"
    });
    react_box.style.position = 'absolute';
    react_box.style.width = '200px';
    react_box.style.height = '35px';

    react_box.style.left = isRight ?
      (e.pageX - 160) + 'px' : (e.pageX - 100) + 'px'

    react_box.style.top = opensUp ?
      rect.top - 35 + 'px' : rect.top + 10 + 'px';

    function handleOutsideClick(event) {
      if (!react_box.contains(event.target)) {
        react_box.remove();
        document.removeEventListener('click', handleOutsideClick);
      }
    }

    document.addEventListener('click', handleOutsideClick);

    return react_box;
  }

  function openReply(message) {
    currentReplyMessage = {
      id: message.wa_id,
      type: message.type,
      message: message.raw
    };

    let message_input_box = document.getElementById("message-input-box");
    lib.removeCss(message_input_box, ["radius-40"]);
    lib.addCss(message_input_box, ["radius-bottom-35"]);

    let message_reply_container = document.getElementById("message-reply-container");
    lib.display(message_reply_container, "");

    message_reply_container.innerHTML = "";

    let message_reply_box = null;

    if (message.type == "image") {
      message_reply_box = lib.element.create("div", {
        class: "box b1 container radius-3 height-50 h-center",
        style: "position: relative;background-color: #f0f0f0;",
      });
      message_reply_container.append(message_reply_box);

      message_replay_image = lib.element.create("img", {
        src: message.content,
        class: "height-50 center",
      });
      message_reply_box.append(message_replay_image);
    }

    if (message.type == "text") {
      message_reply_box = lib.element.create("div", {
        class: "box b1 wrap radius-3 height-50 padding-5",
        style: "position: relative;background-color: #f0f0f0;",
      }, message.content);
      message_reply_container.append(message_reply_box);
    }

    let message_reply_close = lib.element.create("img", {
      class: "size-20 icon",
      src: "/images/icon/close-small.png",
      style: "position: absolute;right:0px;top:0px;"
    });
    message_reply_box && message_reply_box.append(message_reply_close);

    message_reply_close.addEventListener("click", () => {
      closeReply();
    });
  };

  function closeReply() {
    currentReplyMessage = null;

    let message_input_box = document.getElementById("message-input-box");
    let message_reply_container = document.getElementById("message-reply-container");

    lib.addCss(message_input_box, ["radius-40"]);
    lib.removeCss(message_input_box, ["radius-bottom-35"]);
    lib.display(message_reply_container, "none");
  };
</script>